import random

class MarkovChain():
    def __init__(self, source_text):
        self.source_text = self.read_source_text(source_text)

    def read_source_text(self, source_text):
        '''
        takes raw text and splits into a list
        '''
        with open(str(source_text)) as text:
            text = text.read()
            text = text.split()
        return text

    def generate_starting_point(self, order):
        '''
        generates a tuple of words that are capitalized then selects one as a starting point
        '''
        words = self.source_text
        starting_tuples = []
        for i in range(len(words) - order):
            if words[i][0].isupper():
                starting_tuples.append(tuple(words[i:i+order]))
        starting_tuple = random.choice(starting_tuples)
        return ' '.join(starting_tuple)

    def generate_ending_point(self, order):
        '''
        generates a list of words that end in a . ! or ? in the last position of the n-gram then selects one as an ending point
        '''
        words = self.source_text
        ending_words = []
        for i in range(len(words) - order):
            if words[i+order-1][-1] in [".", "?", "!"]:
                ending_ngram = words[i:i+order-1]
                ending_word = words[i+order-1]
                ending_words.append(" ".join(ending_ngram + [ending_word]))
        chosen_ending_ngram = random.choice(ending_words)
        ending_word = chosen_ending_ngram.split()[-1]
        ending_ngram = chosen_ending_ngram.split()[:-1]
        return " ".join(ending_ngram) + " " + ending_word


    def build_map(self, order):
        '''
        creates a dictionary where the key is an n-gram of length "order", then the value is a list of words that follow the key n-gram
        '''
        words = self.source_text
        map = {}
        for i in range(len(words) - order):
            key_ngram = tuple(words[i:i+order])
            next_words = words[i+order]
            if key_ngram in map:
                map[key_ngram].append(next_words)
            else:
                map[key_ngram] = [next_words]
        return map

    def generate_sentence(self, max_words, order):
        '''
        generates a sentence based on words following the starting point and ends on the ending point
        '''
        map = self.build_map(order)
        starting_point = self.generate_starting_point(order)
        ending_point = self.generate_ending_point(order)

        sentence = [starting_point]
        next_word = starting_point
        max_words -= 2 # offset for starting and ending words being appended to sentence

        for count, _ in enumerate(map, start=1):
            # try catch except for rare case when the next word has no value inside of map
            try:
                next_word = random.choice(map[next_word])
            except:
                return " ".join(sentence) + f" {ending_point}"

            sentence.append(next_word)
            if next_word == ending_point or count == max_words:
                return " ".join(sentence) + f" {ending_point}"
                
if __name__ == "__main__":
    source_text = "./data/shrek_corpus.txt"
    markov = MarkovChain(source_text)
    print(markov.generate_sentence(10, 2))
